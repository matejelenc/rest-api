basePath: /
consumes:
- application/json
definitions:
  Groups:
    description: Groups defines a slice of Group
    items:
      $ref: '#/definitions/group'
    type: array
    x-go-package: github.com/matejelenc/rest-api/data
  Model:
    description: |-
      Model base model definition, including fields `ID`, `CreatedAt`, `UpdatedAt`, `DeletedAt`, which could be embedded in your models
      type User struct {
      gorm.Model
      }
    properties:
      CreatedAt:
        format: date-time
        type: string
      DeletedAt:
        format: date-time
        type: string
      ID:
        format: uint64
        type: integer
      UpdatedAt:
        format: date-time
        type: string
    type: object
    x-go-package: github.com/jinzhu/gorm
  Users:
    description: Users defines a slice of User
    items:
      $ref: '#/definitions/user'
    type: array
    x-go-package: github.com/matejelenc/rest-api/data
  group:
    properties:
      CreatedAt:
        format: date-time
        type: string
      DeletedAt:
        format: date-time
        type: string
      ID:
        format: uint64
        type: integer
      UpdatedAt:
        format: date-time
        type: string
      name:
        description: the name for this group
        type: string
        x-go-name: Name
    required:
    - name
    type: object
    x-go-name: Group
    x-go-package: github.com/matejelenc/rest-api/data
  user:
    properties:
      CreatedAt:
        format: date-time
        type: string
      DeletedAt:
        format: date-time
        type: string
      ID:
        format: uint64
        type: integer
      UpdatedAt:
        format: date-time
        type: string
      email:
        description: the email for this user
        type: string
        x-go-name: Email
      group name:
        description: the name of the group a user is in
        type: string
        x-go-name: GroupName
      name:
        description: the name for this user
        type: string
        x-go-name: Name
      password:
        description: the password for the user
        minimum: 4
        type: string
        x-go-name: Password
    required:
    - name
    - email
    - password
    type: object
    x-go-name: Person
    x-go-package: github.com/matejelenc/rest-api/data
info:
  description: Documentation for User and Group Management API
  title: of User and Group Management API
  version: 1.0.0
paths:
  /groups:
    get:
      description: Returns a list of groups
      operationId: getGroups
      responses:
        "200":
          $ref: '#/responses/groupsResponse'
        "400":
          $ref: '#/responses/badRequestResponse'
      tags:
      - groups
    post:
      description: Create a new group
      operationId: createGroup
      responses:
        "201":
          $ref: '#/responses/groupResponse'
        "400":
          $ref: '#/responses/badRequestResponse'
        "401":
          $ref: '#/responses/unauthorizedResponse'
      tags:
      - groups
  /groups/{id}:
    delete:
      description: Deletes a group
      operationId: deleteGroup
      responses:
        "201":
          $ref: '#/responses/noContent'
        "400":
          $ref: '#/responses/badRequestResponse'
        "401":
          $ref: '#/responses/unauthorizedResponse'
      tags:
      - groups
    get:
      description: Returns a group
      operationId: getGroup
      responses:
        "200":
          $ref: '#/responses/groupResponse'
        "400":
          $ref: '#/responses/badRequestResponse'
      tags:
      - groups
    patch:
      description: Update a group
      operationId: updateGroup
      responses:
        "201":
          $ref: '#/responses/groupResponse'
        "400":
          $ref: '#/responses/badRequestResponse'
        "401":
          $ref: '#/responses/unauthorizedResponse'
      tags:
      - groups
  /groups/{id}/members:
    get:
      description: Returns members of a group
      operationId: getMembers
      responses:
        "200":
          $ref: '#/responses/membersResponse'
        "400":
          $ref: '#/responses/badRequestResponse'
      tags:
      - groups
  /login:
    post:
      description: Login a user
      operationId: loginUser
      responses:
        "201":
          $ref: '#/responses/noContent'
        "400":
          $ref: '#/responses/badRequestResponse'
      tags:
      - users
  /users:
    get:
      description: Returns a list of users
      operationId: getUsers
      responses:
        "200":
          $ref: '#/responses/usersResponse'
        "400":
          $ref: '#/responses/badRequestResponse'
      tags:
      - users
    post:
      description: Create a new user
      operationId: createUser
      responses:
        "201":
          $ref: '#/responses/userResponse'
        "400":
          $ref: '#/responses/badRequestResponse'
        "401":
          $ref: '#/responses/unauthorizedResponse'
      tags:
      - users
  /users/{id}:
    delete:
      description: Deletes a user
      operationId: deleteUser
      parameters:
      - description: The id of the user to access, update or delete from database
        format: int64
        in: path
        name: ID
        required: true
        type: integer
      responses:
        "201":
          $ref: '#/responses/noContent'
        "400":
          $ref: '#/responses/badRequestResponse'
        "401":
          $ref: '#/responses/unauthorizedResponse'
      tags:
      - users
    get:
      description: Returns a user
      operationId: getUser
      parameters:
      - description: The id of the user to access, update or delete from database
        format: int64
        in: path
        name: ID
        required: true
        type: integer
      responses:
        "200":
          $ref: '#/responses/usersResponse'
        "400":
          $ref: '#/responses/badRequestResponse'
      tags:
      - users
    patch:
      description: Update a user
      operationId: updateUser
      parameters:
      - description: The id of the user to access, update or delete from database
        format: int64
        in: path
        name: ID
        required: true
        type: integer
      responses:
        "200":
          $ref: '#/responses/userResponse'
        "400":
          $ref: '#/responses/badRequestResponse'
        "401":
          $ref: '#/responses/unauthorizedResponse'
      tags:
      - users
produces:
- application/json
responses:
  badRequestResponse:
    description: A bad request error is returned
    headers:
      message:
        type: string
  groupResponse:
    description: A single group returns in the response
    schema:
      $ref: '#/definitions/group'
  groupsResponse:
    description: A list of groups returns in the response
    schema:
      $ref: '#/definitions/Groups'
  membersResponse:
    description: Members of a group are returned in the response
    schema:
      $ref: '#/definitions/Users'
  noContent:
    description: ""
  unauthorizedResponse:
    description: An unauthorized error is returned
    headers:
      message:
        type: string
  userResponse:
    description: A single user returns in the response
    schema:
      $ref: '#/definitions/user'
  usersResponse:
    description: A list of users returns in the response
    schema:
      $ref: '#/definitions/Users'
schemes:
- http
swagger: "2.0"
